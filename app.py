"""
Flask Web Application for DistilBERT Sentiment Analysis
Giao di·ªán web ph√¢n t√≠ch c·∫£m x√∫c ti·∫øng Vi·ªát
"""

from flask import Flask, render_template, request, jsonify
from transformers import pipeline
import json

app = Flask(__name__)

# Load the sentiment analysis model
print("ƒêang t·∫£i m√¥ h√¨nh DistilBERT...")
classifier = pipeline("sentiment-analysis", 
                     model="distilbert-base-uncased-finetuned-sst-2-english")
print("M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")

@app.route('/')
def index():
    """Trang ch·ªß"""
    return render_template('index.html')

@app.route('/analyze', methods=['POST'])
def analyze_sentiment():
    """API ph√¢n t√≠ch c·∫£m x√∫c"""
    try:
        data = request.get_json()
        text = data.get('text', '').strip()
        
        if not text:
            return jsonify({
                'success': False,
                'error': 'Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch'
            })
        
        # Ph√¢n t√≠ch c·∫£m x√∫c
        result = classifier(text)
        
        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ sang ti·∫øng Vi·ªát
        label = result[0]['label']
        score = result[0]['score']
        
        if label == 'LABEL_1':
            sentiment = 'T√≠ch c·ª±c'
            sentiment_emoji = 'üòä'
            color_class = 'positive'
        else:
            sentiment = 'Ti√™u c·ª±c'
            sentiment_emoji = 'üòî'
            color_class = 'negative'
        
        # T√≠nh ph·∫ßn trƒÉm tin c·∫≠y
        confidence_percent = round(score * 100, 1)
        
        return jsonify({
            'success': True,
            'text': text,
            'sentiment': sentiment,
            'sentiment_emoji': sentiment_emoji,
            'color_class': color_class,
            'confidence': score,
            'confidence_percent': confidence_percent
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'L·ªói khi ph√¢n t√≠ch: {str(e)}'
        })

@app.route('/examples')
def examples():
    """L·∫•y danh s√°ch v√≠ d·ª• m·∫´u"""
    sample_texts = [
        "T√¥i r·∫•t th√≠ch b·ªô phim n√†y!",
        "S·∫£n ph·∫©m n√†y th·∫≠t t·ªá, t√¥i kh√¥ng h√†i l√≤ng.",
        "Th·ªùi ti·∫øt h√¥m nay ·ªïn.",
        "T√¥i y√™u gia ƒë√¨nh c·ªßa m√¨nh.",
        "ƒê√¢y l√† tr·∫£i nghi·ªám t·ªá nh·∫•t t·ª´ tr∆∞·ªõc ƒë·∫øn gi·ªù.",
        "D·ªãch v·ª• r·∫•t tuy·ªát v·ªùi v√† chuy√™n nghi·ªáp.",
        "T√¥i kh√¥ng ch·∫Øc c·∫£m nh·∫≠n c·ªßa m√¨nh v·ªÅ ƒëi·ªÅu n√†y.",
        "Cu·ªën s√°ch n√†y ƒë√£ thay ƒë·ªïi ho√†n to√†n cu·ªôc ƒë·ªùi t√¥i!",
        "ƒê·ªì ƒÉn th·∫≠t kinh kh·ªßng v√† l·∫°nh ng·∫Øt.",
        "M√†n tr√¨nh di·ªÖn c·ªßa c√°c di·ªÖn vi√™n th·∫≠t xu·∫•t s·∫Øc!"
    ]
    
    return jsonify({
        'examples': sample_texts
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
